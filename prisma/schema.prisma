// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  userName String @default("New User") @map("user_name")
  totalPoints Int @default(0) @map("total_points")
  averageTime Float @default(0.0) @map("average_time")
  totalGames Int @default(0) @map("total_games")
  correctGuesses Int @default(0) @map("correct_guesses")
  gamesWon Int @default(0) @map("games_won")
  // to implement: friends, last logged on
}

model Song {
  id            String   @id @default(uuid())
  spotifyId     String   @unique @map("spotify_id")
  soundcloudId  String?  @unique @map("soundcloud_id")
  title         String
  artist        String
  album         String?
  coverUrl      String?  @map("cover_url")
  permalinkUrl  String?  @map("permalink_url")  // SoundCloud track URL
  duration      Int?     // Duration in milliseconds
  access        String   @default("playable") // playable, preview, blocked
  status        String   @default("pending") // pending, approved, denied
  addedBy       String?  @map("added_by")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt
}

model SoundCloudToken {
  id           String   @id @default(cuid())
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  status       String   @default("ACTIVE") // "ACTIVE", "REFRESHING", "FAILED"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}