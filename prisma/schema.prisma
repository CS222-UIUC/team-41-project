generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String     @id @default(uuid())
  userName       String     @default("New User") @map("user_name")
  totalPoints    Int        @default(0) @map("total_points")
  averageTime    Float      @default(0.0) @map("average_time")
  totalGames     Int        @default(0) @map("total_games")
  correctGuesses Int        @default(0) @map("correct_guesses")
  gamesWon       Int        @default(0) @map("games_won")
  playlists      Playlist[]
}

model Playlist {
  id         String   @id @default(uuid())
  name       String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user  User           @relation(fields: [user_id], references: [id])
  songs PlaylistSong[] @relation("PlaylistToSongs")
}

model Song {
  id            String   @id
  spotify_id    String   @unique
  soundcloud_id String?  @unique
  title         String
  artist        String
  album         String?
  cover_url     String?
  permalink_url String?
  duration      Int?
  status        String   @default("pending")
  added_by      String?
  created_at    DateTime @default(now())
  updatedAt     DateTime

  playlists PlaylistSong[] @relation("SongToPlaylists")
}

model PlaylistSong {
  playlist_id String
  song_id     String

  playlist Playlist @relation(name: "PlaylistToSongs", fields: [playlist_id], references: [id], onDelete: Cascade)
  song     Song     @relation(name: "SongToPlaylists", fields: [song_id], references: [id], onDelete: Cascade)

  @@id([playlist_id, song_id])
}

model SoundCloudToken {
  id           String   @id
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  status       String   @default("ACTIVE")
  createdAt    DateTime @default(now())
  updatedAt    DateTime
}
